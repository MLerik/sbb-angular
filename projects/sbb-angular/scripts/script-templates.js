const _ = require('lodash');

const AUTOGENERATED_FILE = `
/*
* Don't delete this file, it's autogenerated by the ACL icons build script
*/`;

exports.getTemplate = function (iconSelector, iconTemplate, iconComponentName, svgClass) {
  return `${AUTOGENERATED_FILE}\nimport { Component, Input } from '@angular/core';
@Component({
  selector: '${iconSelector}',
  // tslint:disable-next-line:max-line-length
  template: '${iconTemplate}',
  styles: []
})
export class ${iconComponentName} {
  constructor() { }

  @Input() svgClass = '';
  commonClass = ' ${svgClass}';
}\n`;
};

exports.getModuleTemplate = function (moduleName, componentObjectsList) {
  const joinedComponentNames = _.map(componentObjectsList, function (componentObject) {
    return componentObject.name;
  }).join(', ');
  const componentImportsStatement = createImportsFromComponents(componentObjectsList).join('\n');
  return `${AUTOGENERATED_FILE}\nimport { NgModule } from '@angular/core';
${componentImportsStatement}

@NgModule({
  imports: [],
  // tslint:disable-next-line:max-line-length
  declarations: [${joinedComponentNames}],
  // tslint:disable-next-line:max-line-length
  exports: [${joinedComponentNames}],
  // tslint:disable-next-line:max-line-length
  entryComponents: [${joinedComponentNames}]
})
export class ${moduleName} { }
`;
};

exports.getCommonModuleTemplate = function (basePath, modules) {
  const joinedModuleNames = _.map(modules, function (module) {
    return module.name;
  }).join(', ');
  const modulesImportStatement = createImportsForCommonModule(modules, basePath).join('\n');
  return `${AUTOGENERATED_FILE}\nimport { NgModule } from '@angular/core';
${modulesImportStatement}

@NgModule({
  // tslint:disable-next-line:max-line-length
  imports: [${joinedModuleNames}],
  declarations: [],
  // tslint:disable-next-line:max-line-length
  exports: [${joinedModuleNames}]
})
export class IconCommonModule { }
`;
};

function createImportsFromComponents(componentObjectsList) {
  return _.map(componentObjectsList, function (componentObject) {
    return `import { ${componentObject.name} } from './${componentObject.fileName.replace('\.ts', '')}';`;
  });
}

function createImportsForCommonModule(modules, basePath) {
  return _.map(modules, function (module) {
    const relativePath = module.path.substring(basePath.length + 1);
    return `import { ${module.name} } from './${relativePath + '/' + module.fileName.replace('\.ts', '')}';`;
  });
}

exports.getPublicApiIconsFileTemplate = function (modules) {
  const publicApiExports = [AUTOGENERATED_FILE ];
  _.forEach(modules, function (module, moduleKey) {
    publicApiExports.push('// tslint:disable-next-line:max-line-length');
    publicApiExports.push(`export * from '${module.path.replace('src/', './')}/${module.fileName.replace('.ts', '')}';`);
    _.forEach(module.components, function (component) {
      publicApiExports.push('// tslint:disable-next-line:max-line-length');
      publicApiExports.push(`export * from '${module.path.replace('src/', './')}/${component.fileName.replace('.ts', '')}';`);
    });
  });
  return publicApiExports.join('\n').concat(`\nexport * from './lib/svg-icons-components/icon-common.module'\n;`);

}

function getIconsArray(createdComponents) {
  const objectEntries = [];
  _.forEach(createdComponents, function (component) {
    const path = _.map(component.sourceFileName.split('/').slice(1, -1), function (tag) {
      return ` '${tag}'`;
    });
    objectEntries.push(
      `  {
    'selector': ' ${component.selector}',
    'name': ' ${component.name} ',
    'tags': [${path}]
  }`);
  });
  return objectEntries;
}

exports.getComponentMappingTemplate = function (createdComponents) {
  const template = `${AUTOGENERATED_FILE}\nexport class SBBComponentsMapping {
    constructor() {}\n
    static icons = [
      ${getIconsArray(createdComponents).join(',\n')}
  ];
  }\n`;
  return template;

}

exports.getComponentsExportMapTemplate = function (createdComponents) {
  const importStatement = _.map(createdComponents, function (component) {
    return component.name;
  }).join(',\n');
  const mapStatement = _.map(createdComponents, function (component) {
    return `'${component.name}': ${component.name}`;
  }).join(',\n')

  return `${AUTOGENERATED_FILE}\nimport {
    ${importStatement}
  } from 'sbb-angular';\n
  const map = {
    ${mapStatement}
  };\n
  export { map };\n`;

}